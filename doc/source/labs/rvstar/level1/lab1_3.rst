.. _lab1_3:

Core feature: Interrupt
=======================

**Purpose**

- To get familiar with the interrupt handling in |nuclei_ncore|
- To know how to use external interrupt

**Requirements**

The following hardware and source codes are required:

* PC host
* Nuclei board (|rv_star|)
* USB Type-C cable
* ``nuclei-sdk/board-labs/rvstar/exti_key_interrupt`` 

**Content**

- Through learning the `Nuclei RISCV ISA Spec <https://nuclei-software.github.io/NMSIS/html/index.html>`_ to get familar with interrput handling in |nuclei_ncore|.
- Through learning the `GD32VF103 MCU User Mannual <https://github.com/riscv-mcu/GD32VF103_DataSheets/blob/master/GD32VF103_User_Manual_EN_V1.0.pdf>`_ to get familar with the usage of EXTI.
- Programming the EXTI peripheral registers of SoC and ECLIC registers of Core to setup an external interrupt  which is triggered by pressing the on-board user key, and the corresponding interrupt service routine can change the status of on-board RGB LED.

    
**Principles**

Interrupt mechanism, that is, the core is suddenly interrupted by other requests during the execution of current program, and current program is stopped, then the core turns to handle other requests. After handling other requests, the core goes back and continue to execute the previous program.

About interrupts processing, it's an important part in processor design. 
The RISC-V processor in |gd_mcu| is Bumblebee Core, it integrates the Enhancement Core-Local Interrupt Controller (ECLIC) for efficient interrupts processing. 

The ECLIC is designed to provide low-latency, vectored, pre-emptive interrupts for RISC-V systems. It can be used to manage multiple interrupt sources.
The types of interrupts supported by the Bumblebee Core are shown in following figure.

.. _figure_lab1_3_1:

.. figure:: /asserts/medias/lab1_3_fig1.jpg
   :width: 600
   :alt: lab1_3_fig1

   Interrupt types

External interrupt is an interrupt initiated from outside the core (other peripherals in SoC). External interrupts allow user to connect to an external interrupt source, such as an interrupt generated by an external device like UART, GPIO and so on.

In SoC level, EXTI (interrupt/event controller) of |gd_mcu| contains up to 19 independent edge detectors and generates interrupt requests or events to the processer. It's used to manage these trigger sources: 16 external lines from GPIO pins and 3 lines from internal modules (including LVD, RTC Alarm, USB Wakeup).

The EXTI has three trigger types: rising edge, falling edge and both edges. Each edge detector in the EXTI can be configured and masked independently.

The architecture of EXTI module is shown in following figure.

.. _figure_lab1_3_2:

.. figure:: /asserts/medias/lab1_3_fig2.jpg
   :alt: lab1_3_fig2
   :width: 500

   Block diagram of EXTI

In |nuclei_sdk|, ``gd32vf103_rvstar.h`` provides API to operate the on-board peripherals, ``gd32vf103_exti.h`` provides API to operate the SoC EXTI, ``core_feature_eclic.h`` provides API to config ECLIC feature for Nuclei Processor Core.

The code for this lab is located in ``nuclei-sdk/board-labs/rvstar/exti_key_interrupt``. It can be divided into 3 parts:

* Part1 : Board config, initialize on-board RGB LED and user key
* Part2 : EXTI config, set *PA0* to used as EXTI source and enable EXTI interrupt in SoC level
* Part3 : ECLIC config, interrupt config in Processor level for specified interrupt source (interrput enable, level and priority)
* Part4 : EXTI interrupt service routine, change the status of on-board RGB LED (Red-Off or Off-Red)

The program flow is shown below:

.. _figure_lab1_3_3:

.. figure:: /asserts/medias/lab1_3_fig3.jpg
   :width: 500
   :alt: lab1_3_fig3

   Programming flow of extern interrupt

**Steps**

1. Connect |rv_star| and your computer with the USB Type-C cable.

2. Compile and run the ``nuclei-sdk/board-labs/rvstar/exti_key_interrupt`` example.

* |nuclei_sdk|

    Using the following commands:

    .. code-block:: console

       cd /nuclei-sdk/board-labs/rvstar/exti_key_interrupt
       make SOC=gd32vf103 BOARD=gd32vf103v_rvstar upload

* |ses|

    Using the following actions:

    .. _figure_lab1_3_4:

    .. figure:: /asserts/medias/lab1_3_fig4.jpg
       :width: 900
       :alt: lab1_3_fig4

       Operations in Embedded Studio

3. Press the on-board User Key(PA0-WKUP), then check the status of on-board RGB LED.

.. _figure_lab1_3_5:

.. figure:: /asserts/medias/lab1_3_fig5.jpg
   :alt: lab1_3_fig5
   :width: 600

   Experimental results

**Exercises**

Try to create you own application to use the internal interrupt of |nuclei_ncore|. 

